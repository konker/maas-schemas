/*

undefined
Response schema for creating payment through TSP api

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import * as t from 'io-ts';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

import * as Booking_4353_ from '../../core/booking';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export type DefinedC = {} & DefinedType;
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/tsp/payments-initiate/request.json';

// Response
// The default export. More information at the top.
export type Response = t.Branded<
  {
    tspId?: Booking_4353_.TspId;
    amount?: number;
    paymentStatus?: string;
  } & {
    tspId: Defined;
    amount: Defined;
    paymentStatus: Defined;
  },
  ResponseBrand
>;
export type ResponseC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        tspId: typeof Booking_4353_.TspId;
        amount: t.NumberC;
        paymentStatus: t.StringC;
      }>,
      t.TypeC<{
        tspId: typeof Defined;
        amount: typeof Defined;
        paymentStatus: typeof Defined;
      }>,
    ]
  >,
  ResponseBrand
>;
export const Response: ResponseC = t.brand(
  t.intersection([
    t.partial({
      tspId: Booking_4353_.TspId,
      amount: t.number,
      paymentStatus: t.string,
    }),
    t.type({
      tspId: Defined,
      amount: Defined,
      paymentStatus: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      tspId?: Booking_4353_.TspId;
      amount?: number;
      paymentStatus?: string;
    } & {
      tspId: Defined;
      amount: Defined;
      paymentStatus: Defined;
    },
    ResponseBrand
  > => true,
  'Response',
);
export type ResponseBrand = {
  readonly Response: unique symbol;
};
/** require('io-ts-validator').validator(nonEmptyArray(Response)).decodeSync(examplesResponse) // => examplesResponse */
export const examplesResponse: NonEmptyArray<Response> = [
  {
    tspId: '00000000-cafe-cafe-cafe-cafecafecafe',
    amount: 2405,
    paymentStatus: 'CONFIRMED',
  },
] as unknown as NonEmptyArray<Response>;

export default Response;

// Success
