/*

undefined
Request schema for routes query v3

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as ApiCommon_ from '../../../core/components/api-common';
import * as t from 'io-ts';
import * as TravelMode_ from '../../../core/components/travel-mode';
import * as UnitsGeo_ from '../../../core/components/units-geo';
import * as Address_ from '../../../core/components/address';
import * as Station_ from '../../../core/components/station';
import * as Units_ from '../../../core/components/units';
import * as SpaceDemand_ from '../../../core/components/spaceDemand';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export interface NullBrand {
  readonly Null: unique symbol;
}
export type NullC = t.BrandC<t.UnknownC, NullBrand>;
export const Null: NullC = t.brand(
  t.unknown,
  (n): n is t.Branded<unknown, NullBrand> => n === null,
  'Null',
);
export type Null = t.TypeOf<typeof Null>;

export const schemaId =
  'https://schemas.maas.global/maas-backend/routes/routes-query-v3/request.json';

// Headers
// The purpose of this remains a mystery
export type Headers = t.Branded<ApiCommon_.StandardApiEndpointHeaders, HeadersBrand>;
export type HeadersC = t.BrandC<
  typeof ApiCommon_.StandardApiEndpointHeaders,
  HeadersBrand
>;
export const Headers: HeadersC = t.brand(
  ApiCommon_.StandardApiEndpointHeaders,
  (x): x is t.Branded<ApiCommon_.StandardApiEndpointHeaders, HeadersBrand> => true,
  'Headers',
);
export interface HeadersBrand {
  readonly Headers: unique symbol;
}

// RoutesQueryModesRaw
// The purpose of this remains a mystery
export type RoutesQueryModesRaw = t.Branded<string, RoutesQueryModesRawBrand>;
export type RoutesQueryModesRawC = t.BrandC<t.StringC, RoutesQueryModesRawBrand>;
export const RoutesQueryModesRaw: RoutesQueryModesRawC = t.brand(
  t.string,
  (x): x is t.Branded<string, RoutesQueryModesRawBrand> =>
    typeof x !== 'string' || x.length >= 1,
  'RoutesQueryModesRaw',
);
export interface RoutesQueryModesRawBrand {
  readonly RoutesQueryModesRaw: unique symbol;
}

// RoutesQueryMode
// The purpose of this remains a mystery
export type RoutesQueryMode = t.Branded<
  | TravelMode_.PersonalModeSHARED_BICYCLE
  | TravelMode_.PersonalModeWALK
  | TravelMode_.PublicTransitMode
  | TravelMode_.PrivateTransitModeTAXI,
  RoutesQueryModeBrand
>;
export type RoutesQueryModeC = t.BrandC<
  t.UnionC<
    [
      typeof TravelMode_.PersonalModeSHARED_BICYCLE,
      typeof TravelMode_.PersonalModeWALK,
      typeof TravelMode_.PublicTransitMode,
      typeof TravelMode_.PrivateTransitModeTAXI,
    ]
  >,
  RoutesQueryModeBrand
>;
export const RoutesQueryMode: RoutesQueryModeC = t.brand(
  t.union([
    TravelMode_.PersonalModeSHARED_BICYCLE,
    TravelMode_.PersonalModeWALK,
    TravelMode_.PublicTransitMode,
    TravelMode_.PrivateTransitModeTAXI,
  ]),
  (
    x,
  ): x is t.Branded<
    | TravelMode_.PersonalModeSHARED_BICYCLE
    | TravelMode_.PersonalModeWALK
    | TravelMode_.PublicTransitMode
    | TravelMode_.PrivateTransitModeTAXI,
    RoutesQueryModeBrand
  > => true,
  'RoutesQueryMode',
);
export interface RoutesQueryModeBrand {
  readonly RoutesQueryMode: unique symbol;
}

// RoutesQueryParametersRaw
// The purpose of this remains a mystery
export type RoutesQueryParametersRaw = t.Branded<
  {
    from?: UnitsGeo_.ShortLocationString;
    fromName?: Address_.PlaceName;
    fromAddress?: Address_.ComponentAddress;
    fromStationId?: Station_.Id;
    to?: UnitsGeo_.ShortLocationString;
    toName?: Address_.PlaceName;
    toAddress?: Address_.ComponentAddress;
    toStationId?: Station_.Id;
    leaveAt?: Units_.Time;
    arriveBy?: Units_.Time;
    leaveAtReturn?: Units_.Time;
    arriveByReturn?: Units_.Time;
    modes?: RoutesQueryModesRaw;
    bookingIdToExtend?: Units_.Uuid;
    spaceDemand?: SpaceDemand_.SpaceDemandString;
  } & {
    from: Defined;
    to: Defined;
  },
  RoutesQueryParametersRawBrand
>;
export type RoutesQueryParametersRawC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        from: typeof UnitsGeo_.ShortLocationString;
        fromName: typeof Address_.PlaceName;
        fromAddress: typeof Address_.ComponentAddress;
        fromStationId: typeof Station_.Id;
        to: typeof UnitsGeo_.ShortLocationString;
        toName: typeof Address_.PlaceName;
        toAddress: typeof Address_.ComponentAddress;
        toStationId: typeof Station_.Id;
        leaveAt: typeof Units_.Time;
        arriveBy: typeof Units_.Time;
        leaveAtReturn: typeof Units_.Time;
        arriveByReturn: typeof Units_.Time;
        modes: typeof RoutesQueryModesRaw;
        bookingIdToExtend: typeof Units_.Uuid;
        spaceDemand: typeof SpaceDemand_.SpaceDemandString;
      }>,
      t.TypeC<{
        from: typeof Defined;
        to: typeof Defined;
      }>,
    ]
  >,
  RoutesQueryParametersRawBrand
>;
export const RoutesQueryParametersRaw: RoutesQueryParametersRawC = t.brand(
  t.intersection([
    t.partial({
      from: UnitsGeo_.ShortLocationString,
      fromName: Address_.PlaceName,
      fromAddress: Address_.ComponentAddress,
      fromStationId: Station_.Id,
      to: UnitsGeo_.ShortLocationString,
      toName: Address_.PlaceName,
      toAddress: Address_.ComponentAddress,
      toStationId: Station_.Id,
      leaveAt: Units_.Time,
      arriveBy: Units_.Time,
      leaveAtReturn: Units_.Time,
      arriveByReturn: Units_.Time,
      modes: RoutesQueryModesRaw,
      bookingIdToExtend: Units_.Uuid,
      spaceDemand: SpaceDemand_.SpaceDemandString,
    }),
    t.type({
      from: Defined,
      to: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      from?: UnitsGeo_.ShortLocationString;
      fromName?: Address_.PlaceName;
      fromAddress?: Address_.ComponentAddress;
      fromStationId?: Station_.Id;
      to?: UnitsGeo_.ShortLocationString;
      toName?: Address_.PlaceName;
      toAddress?: Address_.ComponentAddress;
      toStationId?: Station_.Id;
      leaveAt?: Units_.Time;
      arriveBy?: Units_.Time;
      leaveAtReturn?: Units_.Time;
      arriveByReturn?: Units_.Time;
      modes?: RoutesQueryModesRaw;
      bookingIdToExtend?: Units_.Uuid;
      spaceDemand?: SpaceDemand_.SpaceDemandString;
    } & {
      from: Defined;
      to: Defined;
    },
    RoutesQueryParametersRawBrand
  > => true,
  'RoutesQueryParametersRaw',
);
export interface RoutesQueryParametersRawBrand {
  readonly RoutesQueryParametersRaw: unique symbol;
}

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  ({
    requestContext?: ApiCommon_.ApiGatewayAuthorizedRequestContext;
    headers?: Headers;
    pathParameters?: Null;
    queryStringParameters?: RoutesQueryParametersRaw;
    body?: Null;
  } & Record<string, unknown>) & {
    requestContext: Defined;
    headers: Defined;
    queryStringParameters: Defined;
  },
  RequestBrand
>;
export type RequestC = t.BrandC<
  t.IntersectionC<
    [
      t.IntersectionC<
        [
          t.PartialC<{
            requestContext: typeof ApiCommon_.ApiGatewayAuthorizedRequestContext;
            headers: typeof Headers;
            pathParameters: typeof Null;
            queryStringParameters: typeof RoutesQueryParametersRaw;
            body: typeof Null;
          }>,
          t.RecordC<t.StringC, t.UnknownC>,
        ]
      >,
      t.TypeC<{
        requestContext: typeof Defined;
        headers: typeof Defined;
        queryStringParameters: typeof Defined;
      }>,
    ]
  >,
  RequestBrand
>;
export const Request: RequestC = t.brand(
  t.intersection([
    t.intersection([
      t.partial({
        requestContext: ApiCommon_.ApiGatewayAuthorizedRequestContext,
        headers: Headers,
        pathParameters: Null,
        queryStringParameters: RoutesQueryParametersRaw,
        body: Null,
      }),
      t.record(t.string, t.unknown),
    ]),
    t.type({
      requestContext: Defined,
      headers: Defined,
      queryStringParameters: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    ({
      requestContext?: ApiCommon_.ApiGatewayAuthorizedRequestContext;
      headers?: Headers;
      pathParameters?: Null;
      queryStringParameters?: RoutesQueryParametersRaw;
      body?: Null;
    } & Record<string, unknown>) & {
      requestContext: Defined;
      headers: Defined;
      queryStringParameters: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
