/*

undefined
The base environments object with several environment groups and related meta data

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Common_ from '../core/components/common';
import * as Units_ from '../core/components/units';
import * as Apis_ from './apis';
import * as Tenants_ from './tenants';
import * as Accounts_ from './accounts';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { nonEmptyArray } from 'io-ts-types/lib/nonEmptyArray';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'https://schemas.maas.global/environments/environments.json';

// DeveloperName
// Full name or tag of a developer
export type DeveloperName = t.Branded<string, DeveloperNameBrand>;
export type DeveloperNameC = t.BrandC<t.StringC, DeveloperNameBrand>;
export const DeveloperName: DeveloperNameC = t.brand(
  t.string,
  (x): x is t.Branded<string, DeveloperNameBrand> =>
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 255),
  'DeveloperName',
);
export interface DeveloperNameBrand {
  readonly DeveloperName: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(DeveloperName)).decodeSync(examplesDeveloperName) // => examplesDeveloperName */
export const examplesDeveloperName: NonEmptyArray<DeveloperName> = ([
  'Alisha Admin',
] as unknown) as NonEmptyArray<DeveloperName>;

// DeveloperEmail
// Email address of a developer
export type DeveloperEmail = t.Branded<Common_.Email, DeveloperEmailBrand>;
export type DeveloperEmailC = t.BrandC<typeof Common_.Email, DeveloperEmailBrand>;
export const DeveloperEmail: DeveloperEmailC = t.brand(
  Common_.Email,
  (x): x is t.Branded<Common_.Email, DeveloperEmailBrand> => true,
  'DeveloperEmail',
);
export interface DeveloperEmailBrand {
  readonly DeveloperEmail: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(DeveloperEmail)).decodeSync(examplesDeveloperEmail) // => examplesDeveloperEmail */
export const examplesDeveloperEmail: NonEmptyArray<DeveloperEmail> = ([
  'admin@example.com',
] as unknown) as NonEmptyArray<DeveloperEmail>;

// Developer
// Developer contact information
export type Developer = t.Branded<
  {
    name?: DeveloperName;
    email?: DeveloperEmail;
  } & {
    name: Defined;
  },
  DeveloperBrand
>;
export type DeveloperC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        name: typeof DeveloperName;
        email: typeof DeveloperEmail;
      }>,
      t.TypeC<{
        name: typeof Defined;
      }>,
    ]
  >,
  DeveloperBrand
>;
export const Developer: DeveloperC = t.brand(
  t.intersection([
    t.partial({
      name: DeveloperName,
      email: DeveloperEmail,
    }),
    t.type({
      name: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name?: DeveloperName;
      email?: DeveloperEmail;
    } & {
      name: Defined;
    },
    DeveloperBrand
  > => true,
  'Developer',
);
export interface DeveloperBrand {
  readonly Developer: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Developer)).decodeSync(examplesDeveloper) // => examplesDeveloper */
export const examplesDeveloper: NonEmptyArray<Developer> = ([
  { name: 'Alisha Admin', email: 'admin@example.com' },
  { name: 'Dennis Developer' },
] as unknown) as NonEmptyArray<Developer>;

// EnvironmentId
// The purpose of this remains a mystery
export type EnvironmentId = t.Branded<string & Units_.HostnameLabel, EnvironmentIdBrand>;
export type EnvironmentIdC = t.BrandC<
  t.IntersectionC<[t.StringC, typeof Units_.HostnameLabel]>,
  EnvironmentIdBrand
>;
export const EnvironmentId: EnvironmentIdC = t.brand(
  t.intersection([t.string, Units_.HostnameLabel]),
  (x): x is t.Branded<string & Units_.HostnameLabel, EnvironmentIdBrand> => true,
  'EnvironmentId',
);
export interface EnvironmentIdBrand {
  readonly EnvironmentId: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentId)).decodeSync(examplesEnvironmentId) // => examplesEnvironmentId */
export const examplesEnvironmentId: NonEmptyArray<EnvironmentId> = ([
  'production',
  'testing',
  'environment13',
  'fantasy-topping',
] as unknown) as NonEmptyArray<EnvironmentId>;

// EnvironmentLive
// Live environments are connected to actual payment and TSP services
export type EnvironmentLive = t.Branded<boolean, EnvironmentLiveBrand>;
export type EnvironmentLiveC = t.BrandC<t.BooleanC, EnvironmentLiveBrand>;
export const EnvironmentLive: EnvironmentLiveC = t.brand(
  t.boolean,
  (x): x is t.Branded<boolean, EnvironmentLiveBrand> => true,
  'EnvironmentLive',
);
export interface EnvironmentLiveBrand {
  readonly EnvironmentLive: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentLive)).decodeSync(examplesEnvironmentLive) // => examplesEnvironmentLive */
export const examplesEnvironmentLive: NonEmptyArray<EnvironmentLive> = ([
  true,
  false,
] as unknown) as NonEmptyArray<EnvironmentLive>;

// EnvironmentName
// The purpose of this remains a mystery
export type EnvironmentName = t.Branded<string, EnvironmentNameBrand>;
export type EnvironmentNameC = t.BrandC<t.StringC, EnvironmentNameBrand>;
export const EnvironmentName: EnvironmentNameC = t.brand(
  t.string,
  (x): x is t.Branded<string, EnvironmentNameBrand> => true,
  'EnvironmentName',
);
export interface EnvironmentNameBrand {
  readonly EnvironmentName: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentName)).decodeSync(examplesEnvironmentName) // => examplesEnvironmentName */
export const examplesEnvironmentName: NonEmptyArray<EnvironmentName> = ([
  'production',
  'testing',
  'environment 13',
  'Fantasy Topping',
] as unknown) as NonEmptyArray<EnvironmentName>;

// EnvironmentDescription
// The purpose of this remains a mystery
export type EnvironmentDescription = t.Branded<string, EnvironmentDescriptionBrand>;
export type EnvironmentDescriptionC = t.BrandC<t.StringC, EnvironmentDescriptionBrand>;
export const EnvironmentDescription: EnvironmentDescriptionC = t.brand(
  t.string,
  (x): x is t.Branded<string, EnvironmentDescriptionBrand> => true,
  'EnvironmentDescription',
);
export interface EnvironmentDescriptionBrand {
  readonly EnvironmentDescription: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentDescription)).decodeSync(examplesEnvironmentDescription) // => examplesEnvironmentDescription */
export const examplesEnvironmentDescription: NonEmptyArray<EnvironmentDescription> = ([
  'Production environment',
  'Testing environment',
  'Add support for pizza customization',
] as unknown) as NonEmptyArray<EnvironmentDescription>;

// Environment
// The purpose of this remains a mystery
export type Environment = t.Branded<
  {
    id?: EnvironmentId;
    api?: Apis_.ApiUrl;
    apis?: Apis_.ApiConfigs;
    tenants?: Tenants_.TenantIndex;
    live?: EnvironmentLive;
    contact?: Developer;
    account?: Accounts_.AccountAlias;
    name?: EnvironmentName;
    description?: EnvironmentDescription;
  } & {
    id: Defined;
    api: Defined;
    apis: Defined;
    tenants: Defined;
    live: Defined;
    contact: Defined;
    account: Defined;
  },
  EnvironmentBrand
>;
export type EnvironmentC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof EnvironmentId;
        api: typeof Apis_.ApiUrl;
        apis: typeof Apis_.ApiConfigs;
        tenants: typeof Tenants_.TenantIndex;
        live: typeof EnvironmentLive;
        contact: typeof Developer;
        account: typeof Accounts_.AccountAlias;
        name: typeof EnvironmentName;
        description: typeof EnvironmentDescription;
      }>,
      t.TypeC<{
        id: typeof Defined;
        api: typeof Defined;
        apis: typeof Defined;
        tenants: typeof Defined;
        live: typeof Defined;
        contact: typeof Defined;
        account: typeof Defined;
      }>,
    ]
  >,
  EnvironmentBrand
>;
export const Environment: EnvironmentC = t.brand(
  t.intersection([
    t.partial({
      id: EnvironmentId,
      api: Apis_.ApiUrl,
      apis: Apis_.ApiConfigs,
      tenants: Tenants_.TenantIndex,
      live: EnvironmentLive,
      contact: Developer,
      account: Accounts_.AccountAlias,
      name: EnvironmentName,
      description: EnvironmentDescription,
    }),
    t.type({
      id: Defined,
      api: Defined,
      apis: Defined,
      tenants: Defined,
      live: Defined,
      contact: Defined,
      account: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: EnvironmentId;
      api?: Apis_.ApiUrl;
      apis?: Apis_.ApiConfigs;
      tenants?: Tenants_.TenantIndex;
      live?: EnvironmentLive;
      contact?: Developer;
      account?: Accounts_.AccountAlias;
      name?: EnvironmentName;
      description?: EnvironmentDescription;
    } & {
      id: Defined;
      api: Defined;
      apis: Defined;
      tenants: Defined;
      live: Defined;
      contact: Defined;
      account: Defined;
    },
    EnvironmentBrand
  > => true,
  'Environment',
);
export interface EnvironmentBrand {
  readonly Environment: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Environment)).decodeSync(examplesEnvironment) // => examplesEnvironment */
export const examplesEnvironment: NonEmptyArray<Environment> = ([
  {
    id: 'production',
    api: 'https://production.example.com/api/',
    apis: { main: { url: 'https://production.example.com/api/' } },
    tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
    live: true,
    account: 'production',
    contact: { name: 'Alisha Admin', email: 'admin@example.com' },
    description: 'Production environment',
  },
] as unknown) as NonEmptyArray<Environment>;

// DevEnvironment
// The purpose of this remains a mystery
export type DevEnvironment = t.Branded<
  Environment &
    (({
      live?: false;
    } & Record<string, unknown>) & {
      live: Defined;
    }),
  DevEnvironmentBrand
>;
export type DevEnvironmentC = t.BrandC<
  t.IntersectionC<
    [
      typeof Environment,
      t.IntersectionC<
        [
          t.IntersectionC<
            [
              t.PartialC<{
                live: t.LiteralC<false>;
              }>,
              t.RecordC<t.StringC, t.UnknownC>,
            ]
          >,
          t.TypeC<{
            live: typeof Defined;
          }>,
        ]
      >,
    ]
  >,
  DevEnvironmentBrand
>;
export const DevEnvironment: DevEnvironmentC = t.brand(
  t.intersection([
    Environment,
    t.intersection([
      t.intersection([
        t.partial({
          live: t.literal(false),
        }),
        t.record(t.string, t.unknown),
      ]),
      t.type({
        live: Defined,
      }),
    ]),
  ]),
  (
    x,
  ): x is t.Branded<
    Environment &
      (({
        live?: false;
      } & Record<string, unknown>) & {
        live: Defined;
      }),
    DevEnvironmentBrand
  > => true,
  'DevEnvironment',
);
export interface DevEnvironmentBrand {
  readonly DevEnvironment: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(DevEnvironment)).decodeSync(examplesDevEnvironment) // => examplesDevEnvironment */
export const examplesDevEnvironment: NonEmptyArray<DevEnvironment> = ([
  {
    id: 'testing',
    api: 'https://testing.example.com/api/',
    apis: { main: { url: 'https://testing.example.com/api/' } },
    tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
    live: false,
    account: 'testing',
    contact: { name: 'Alisha Admin' },
    description: 'Testing environment',
  },
] as unknown) as NonEmptyArray<DevEnvironment>;

// EnvironmentGroupName
// The purpose of this remains a mystery
export type EnvironmentGroupName = t.Branded<string, EnvironmentGroupNameBrand>;
export type EnvironmentGroupNameC = t.BrandC<t.StringC, EnvironmentGroupNameBrand>;
export const EnvironmentGroupName: EnvironmentGroupNameC = t.brand(
  t.string,
  (x): x is t.Branded<string, EnvironmentGroupNameBrand> => true,
  'EnvironmentGroupName',
);
export interface EnvironmentGroupNameBrand {
  readonly EnvironmentGroupName: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentGroupName)).decodeSync(examplesEnvironmentGroupName) // => examplesEnvironmentGroupName */
export const examplesEnvironmentGroupName: NonEmptyArray<EnvironmentGroupName> = ([
  'Core Environments',
  'Development Environments',
] as unknown) as NonEmptyArray<EnvironmentGroupName>;

// EnvironmentGroupDescription
// The purpose of this remains a mystery
export type EnvironmentGroupDescription = t.Branded<
  string,
  EnvironmentGroupDescriptionBrand
>;
export type EnvironmentGroupDescriptionC = t.BrandC<
  t.StringC,
  EnvironmentGroupDescriptionBrand
>;
export const EnvironmentGroupDescription: EnvironmentGroupDescriptionC = t.brand(
  t.string,
  (x): x is t.Branded<string, EnvironmentGroupDescriptionBrand> => true,
  'EnvironmentGroupDescription',
);
export interface EnvironmentGroupDescriptionBrand {
  readonly EnvironmentGroupDescription: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentGroupDescription)).decodeSync(examplesEnvironmentGroupDescription) // => examplesEnvironmentGroupDescription */
export const examplesEnvironmentGroupDescription: NonEmptyArray<EnvironmentGroupDescription> = ([
  'The main environments used by paying customers',
  'Production like environments used for quality assurance',
  'Development environments used for feature development',
] as unknown) as NonEmptyArray<EnvironmentGroupDescription>;

// EnvironmentGroup
// The purpose of this remains a mystery
export type EnvironmentGroup = t.Branded<
  {
    name?: EnvironmentGroupName;
    envs?: Array<Environment>;
    description?: EnvironmentGroupDescription;
  } & {
    name: Defined;
    envs: Defined;
  },
  EnvironmentGroupBrand
>;
export type EnvironmentGroupC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        name: typeof EnvironmentGroupName;
        envs: t.ArrayC<typeof Environment>;
        description: typeof EnvironmentGroupDescription;
      }>,
      t.TypeC<{
        name: typeof Defined;
        envs: typeof Defined;
      }>,
    ]
  >,
  EnvironmentGroupBrand
>;
export const EnvironmentGroup: EnvironmentGroupC = t.brand(
  t.intersection([
    t.partial({
      name: EnvironmentGroupName,
      envs: t.array(Environment),
      description: EnvironmentGroupDescription,
    }),
    t.type({
      name: Defined,
      envs: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      name?: EnvironmentGroupName;
      envs?: Array<Environment>;
      description?: EnvironmentGroupDescription;
    } & {
      name: Defined;
      envs: Defined;
    },
    EnvironmentGroupBrand
  > => true,
  'EnvironmentGroup',
);
export interface EnvironmentGroupBrand {
  readonly EnvironmentGroup: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(EnvironmentGroup)).decodeSync(examplesEnvironmentGroup) // => examplesEnvironmentGroup */
export const examplesEnvironmentGroup: NonEmptyArray<EnvironmentGroup> = ([
  {
    name: 'Core Environments',
    envs: [
      {
        id: 'production',
        api: 'https://production.example.com/api/',
        apis: { main: { url: 'https://production.example.com/api/' } },
        tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
        live: true,
        account: 'production',
        contact: { name: 'Alisha Admin', email: 'admin@example.com' },
        description: 'Production environment',
      },
      {
        id: 'testing',
        api: 'https://testing.example.com/api/',
        apis: { main: { url: 'https://testing.example.com/api/' } },
        tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
        live: false,
        account: 'testing',
        contact: { name: 'Alisha Admin' },
        description: 'Testing environment',
      },
    ],
  },
  {
    name: 'Development Environments',
    envs: [
      {
        id: 'fantasy-topping',
        api: 'https://fantasy-topping.example.com/api/',
        apis: { main: { url: 'https://fantasy-topping.example.com/api/' } },
        tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
        live: false,
        account: 'testing',
        contact: { name: 'Dennis Developer' },
        name: 'Fantasy Topping',
        description: 'Add support for pizza customization',
      },
    ],
  },
] as unknown) as NonEmptyArray<EnvironmentGroup>;

// EnvironmentIndex
// The purpose of this remains a mystery
export type EnvironmentIndex = t.Branded<Array<EnvironmentGroup>, EnvironmentIndexBrand>;
export type EnvironmentIndexC = t.BrandC<
  t.ArrayC<typeof EnvironmentGroup>,
  EnvironmentIndexBrand
>;
export const EnvironmentIndex: EnvironmentIndexC = t.brand(
  t.array(EnvironmentGroup),
  (x): x is t.Branded<Array<EnvironmentGroup>, EnvironmentIndexBrand> => true,
  'EnvironmentIndex',
);
export interface EnvironmentIndexBrand {
  readonly EnvironmentIndex: unique symbol;
}

// Environments
// The default export. More information at the top.
export type Environments = t.Branded<
  {
    accounts?: Accounts_.AccountIndex;
    apis?: Apis_.ApiIndex;
    index?: EnvironmentIndex;
  } & {
    index: Defined;
  },
  EnvironmentsBrand
>;
export type EnvironmentsC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        accounts: typeof Accounts_.AccountIndex;
        apis: typeof Apis_.ApiIndex;
        index: typeof EnvironmentIndex;
      }>,
      t.TypeC<{
        index: typeof Defined;
      }>,
    ]
  >,
  EnvironmentsBrand
>;
export const Environments: EnvironmentsC = t.brand(
  t.intersection([
    t.partial({
      accounts: Accounts_.AccountIndex,
      apis: Apis_.ApiIndex,
      index: EnvironmentIndex,
    }),
    t.type({
      index: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      accounts?: Accounts_.AccountIndex;
      apis?: Apis_.ApiIndex;
      index?: EnvironmentIndex;
    } & {
      index: Defined;
    },
    EnvironmentsBrand
  > => true,
  'Environments',
);
export interface EnvironmentsBrand {
  readonly Environments: unique symbol;
}
/** require('io-ts-validator').validator(nonEmptyArray(Environments)).decodeSync(examplesEnvironments) // => examplesEnvironments */
export const examplesEnvironments: NonEmptyArray<Environments> = ([
  {
    accounts: {
      production: {
        id: '001234567890',
        name: 'Example Account',
        description: 'This account is but an example account',
      },
      testing: { id: '101234567890' },
    },
    apis: {
      main: {
        name: 'The Main Api',
        description: 'This is the only api available at the moment.',
      },
    },
    index: [
      {
        name: 'Core Environments',
        envs: [
          {
            id: 'production',
            api: 'https://production.example.com/api/',
            apis: { main: { url: 'https://production.example.com/api/' } },
            tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
            live: true,
            account: 'production',
            contact: { name: 'Alisha Admin', email: 'admin@example.com' },
            description: 'Production environment',
          },
          {
            id: 'testing',
            api: 'https://testing.example.com/api/',
            apis: { main: { url: 'https://testing.example.com/api/' } },
            tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
            live: false,
            account: 'testing',
            contact: { name: 'Alisha Admin' },
            description: 'Testing environment',
          },
        ],
      },
      {
        name: 'Development Environments',
        envs: [
          {
            id: 'fantasy-topping',
            api: 'https://fantasy-topping.example.com/api/',
            apis: {
              fun: { url: 'https://fantasy-topping.example.com/fun/' },
              boring: { url: 'https://fantasy-topping.example.com/boring/' },
            },
            tenants: { multipol: { name: 'Multipol' }, whim: { name: 'Whim' } },
            live: false,
            account: 'testing',
            contact: { name: 'Dennis Developer' },
            name: 'Fantasy Topping',
            description: 'Add support for pizza customization',
          },
        ],
      },
    ],
  },
] as unknown) as NonEmptyArray<Environments>;

export default Environments;

// Success
